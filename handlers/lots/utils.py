import re
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import GROUP_ID

def format_price_rub(amount: int) -> str:
    return f"{amount:,}".replace(",", ".") + " —Ä—É–±."

def parse_price_to_int(text: str):
    if not text:
        return None
    cleaned = re.sub(r"[^\d]", "", text)
    return int(cleaned) if cleaned else None

def build_buy_kb(lot_id: int) -> InlineKeyboardMarkup:
    # —Ç–µ–∫—Å—Ç—ã —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_lot:{lot_id}")],
        [InlineKeyboardButton(text="üöö –ö—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", callback_data=f"buy_lot_delivery:{lot_id}")]
    ])

async def refresh_lot_keyboard(bot, lot) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ª–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:
    - –µ—Å–ª–∏ lot.is_active == True -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    - –µ—Å–ª–∏ False -> —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    """
    if not getattr(lot, "message_id", None):
        return
    kb = build_buy_kb(lot.id) if getattr(lot, "is_active", False) else None
    try:
        await bot.edit_message_reply_markup(
            chat_id=GROUP_ID,
            message_id=lot.message_id,
            reply_markup=kb
        )
    except Exception:
        pass
