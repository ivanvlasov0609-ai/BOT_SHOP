# handlers/lots/create.py
import logging
import html

from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from config import ADMINS, GROUP_ID
from db import Lot, User
from keyboards.inline import back_kb
from handlers.lots.utils import format_price_rub, parse_price_to_int, build_buy_kb
from handlers.lots.menu import lots_menu

router = Router()
log = logging.getLogger(__name__)


# ---------------- FSM ----------------
class LotCreation(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()
    confirm = State()


# ---------------- –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è ----------------
@router.callback_query(F.data == "create_lot")
async def start_lot_creation(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    try:
        await call.message.delete()
    except Exception:
        pass

    msg = await call.message.answer("üè∑Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b>", reply_markup=back_kb())
    await state.set_state(LotCreation.name)
    await state.update_data(last_msg=msg.message_id)


@router.message(LotCreation.name)
async def set_name(msg: Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()
    if data.get("last_msg"):
        try:
            await msg.bot.delete_message(msg.chat.id, data["last_msg"])
        except Exception:
            pass

    await state.update_data(name=msg.text.strip())
    new_msg = await msg.answer("üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞:</b>", reply_markup=back_kb())
    await state.set_state(LotCreation.description)
    await state.update_data(last_msg=new_msg.message_id)


@router.message(LotCreation.description)
async def set_description(msg: Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()
    if data.get("last_msg"):
        try:
            await msg.bot.delete_message(msg.chat.id, data["last_msg"])
        except Exception:
            pass

    await state.update_data(description=msg.text.strip())
    new_msg = await msg.answer("üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ):</b>", reply_markup=back_kb())
    await state.set_state(LotCreation.price)
    await state.update_data(last_msg=new_msg.message_id)


@router.message(LotCreation.price)
async def set_price(msg: Message, state: FSMContext):
    price_int = parse_price_to_int(msg.text)
    await msg.delete()
    data = await state.get_data()
    if data.get("last_msg"):
        try:
            await msg.bot.delete_message(msg.chat.id, data["last_msg"])
        except Exception:
            pass

    if price_int is None:
        new_msg = await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=back_kb())
        await state.update_data(last_msg=new_msg.message_id)
        return

    await state.update_data(price=price_int, preview_shown=False, album_mg_id=None, photo=None)
    new_msg = await msg.answer("üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ –ª–æ—Ç–∞</b>", reply_markup=back_kb())
    await state.set_state(LotCreation.photo)
    await state.update_data(last_msg=new_msg.message_id)


@router.message(LotCreation.photo)
async def set_photo(msg: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–û–ï —Ñ–æ—Ç–æ.
    - –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∞–ª—å–±–æ–º/–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π) ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ–∑–∂–µ.
    """
    # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –∏–≥–Ω–æ—Ä
    if not msg.photo:
        await msg.delete()
        return

    data = await state.get_data()

    # —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —Ñ–æ—Ç–æ/–ø–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–≤—å—é ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–¥—Ä—ã
    if data.get("photo") or data.get("preview_shown"):
        await msg.delete()
        return

    # –µ—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ id –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
    if msg.media_group_id is not None:
        mg_id = str(msg.media_group_id)
        if data.get("album_mg_id") and data.get("album_mg_id") != mg_id:
            # –¥—Ä—É–≥–æ–π –∞–ª—å–±–æ–º ‚Äî –∏–≥–Ω–æ—Ä
            await msg.delete()
            return
        # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä —É–∂–µ –ø—Ä–∏–Ω—è—Ç, –≤—ã—à–µ –º—ã —É–∂–µ –≤—ã—à–ª–∏ –ø–æ photo/preview_shown
        await state.update_data(album_mg_id=mg_id)

    file_id = msg.photo[-1].file_id
    await msg.delete()

    # —É–¥–∞–ª–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
    if data.get("last_msg"):
        try:
            await msg.bot.delete_message(msg.chat.id, data["last_msg"])
        except Exception:
            pass

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–¥—Ä—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
    await state.update_data(photo=file_id)

    name = data.get("name", "")
    description = data.get("description", "")
    price = format_price_rub(data.get("price", 0))

    caption = f"üì¶ <b>{html.escape(name)}</b>\n\n{html.escape(description)}\n\nüí∞ <b>{price}</b>"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_lot")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="lots")]
    ])

    preview_msg = await msg.answer_photo(photo=file_id, caption=caption, reply_markup=kb)
    await state.set_state(LotCreation.confirm)
    await state.update_data(last_msg=preview_msg.message_id, preview_shown=True)


# ---------------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è ----------------
@router.callback_query(F.data == "publish_lot")
async def publish_lot(call: CallbackQuery, state: FSMContext, bot: Bot, session: AsyncSession):
    await call.answer()
    data = await state.get_data()
    if not data:
        await call.answer("‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ê–≤—Ç–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
    res = await session.execute(select(User).where(User.tg_id == call.from_user.id))
    author = res.scalars().first()

    lot = Lot(
        name=data["name"],
        description=data["description"],
        price=int(data["price"]),
        photo=data["photo"],
        is_active=True,
        created_by=author.id if author else None
    )
    session.add(lot)
    await session.commit()
    await session.refresh(lot)
    log.info("Lot published: id=%s, name=%s, author_tg=%s", lot.id, lot.name, call.from_user.id)

    caption = (
        f"üü¢ <b>–õ–æ—Ç ID: {lot.id}</b>\n\n"
        f"üì¶ {html.escape(lot.name)}\n\n"
        f"{html.escape(lot.description)}\n\n"
        f"üí∞ <b>{format_price_rub(lot.price)}</b>"
    )

    # –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É + –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    msg_group = await bot.send_photo(
        chat_id=GROUP_ID,
        photo=lot.photo,
        caption=caption,
        reply_markup=build_buy_kb(lot.id)
    )

    lot.message_id = msg_group.message_id
    await session.commit()

    await state.clear()
    await call.answer("‚úÖ –õ–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", show_alert=True)
    await lots_menu(call)
