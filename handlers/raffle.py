"""from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime

from db import Raffle, RaffleParticipant

router = Router()

@router.callback_query(F.data == "raffle")
async def participate_in_raffle(call: CallbackQuery, session: AsyncSession):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    result = await session.execute(
        select(Raffle).where(
            Raffle.is_active == True,
            Raffle.start_at <= datetime.utcnow(),
            Raffle.end_at >= datetime.utcnow()
        )
    )
    raffle = result.scalars().first()

    if not raffle:
        await call.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ–π—á–∞—Å –Ω–µ—Ç", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = await session.execute(
        select(RaffleParticipant).where(
            RaffleParticipant.raffle_id == raffle.id,
            RaffleParticipant.user_id == user_id
        )
    )
    participant = result.scalars().first()

    if participant:
        await call.answer("‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    new_participant = RaffleParticipant(raffle_id=raffle.id, user_id=user_id)
    session.add(new_participant)
    await session.commit()

    await call.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!", show_alert=True)"""
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime

from db import Raffle, RaffleParticipant

router = Router()


@router.callback_query(F.data == "raffle")
async def raffle_handler(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    raffle = (await session.execute(select(Raffle).where(Raffle.is_active == True))).scalar_one_or_none()
    if not raffle:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π ‚ùå", show_alert=True)
        return

    now = datetime.utcnow()
    if raffle.start_at and now < raffle.start_at:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è ‚è≥", show_alert=True)
        return

    if raffle.end_at and now > raffle.end_at:
        await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω üèÅ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ
    participant_exists = (
        await session.execute(
            select(RaffleParticipant).where(
                RaffleParticipant.raffle_id == raffle.id,
                RaffleParticipant.user_id == callback.from_user.id
            )
        )
    ).scalar_one_or_none()

    if participant_exists:
        await callback.answer("Ô∏èÔ∏è‚ö†Ô∏è Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant = RaffleParticipant(raffle_id=raffle.id, user_id=callback.from_user.id)
    session.add(participant)
    await session.commit()

    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üéâ", show_alert=True)


async def finish_raffle(bot: Bot, session: AsyncSession, raffle_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    raffle = await session.get(Raffle, raffle_id)
    if not raffle:
        return

    participants = (
        await session.execute(
            select(RaffleParticipant).where(RaffleParticipant.raffle_id == raffle.id)
        )
    ).scalars().all()

    raffle.is_active = False
    raffle.updated_at = datetime.utcnow()
    await session.commit()

    for p in participants:
        try:
            await bot.send_message(p.user_id, f"üèÅ –†–æ–∑—ã–≥—Ä—ã—à '{raffle.title}' –∑–∞–≤–µ—Ä—à—ë–Ω!")
        except Exception:
            pass
