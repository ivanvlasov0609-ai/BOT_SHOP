import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from config import START_PHOTO, ADMINS
from db import Lot
from handlers.lots import format_price_rub
from keyboards.inline import client_kb, build_admin_main_kb

router = Router()
log = logging.getLogger(__name__)


def _availability(is_active: bool) -> str:
    return "üü¢ –í –Ω–∞–ª–∏—á–∏–∏" if is_active else "üî¥ –ü—Ä–æ–¥–∞–Ω"


@router.callback_query(F.data == "catalog")
async def show_catalog(call: CallbackQuery, session: AsyncSession):
    """–í—ã–≤–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ—Ç–æ–≤ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ —Ä–∞–Ω—å—à–µ."""
    try:
        await call.message.delete()
    except Exception:
        pass

    result = await session.execute(select(Lot))
    lots = result.scalars().all()

    if not lots:
        # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç —Å –º–µ–Ω—é
        try:
            await call.message.answer_photo(
                FSInputFile(START_PHOTO),
                caption="üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.",
                reply_markup=client_kb if call.from_user.id not in ADMINS else build_admin_main_kb()
            )
        except Exception:
            await call.message.answer(
                "üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.",
                reply_markup=client_kb if call.from_user.id not in ADMINS else build_admin_main_kb()
            )
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
    lines = ["üìÇ <b>–ö–∞—Ç–∞–ª–æ–≥ –ª–æ—Ç–æ–≤:</b>", ""]
    for lot in lots:
        lines.append(f"üì¶ <b>–õ–æ—Ç ID: {lot.id}</b> | {lot.name}")
        lines.append(f"üí∞ {format_price_rub(lot.price)}")
        lines.append(_availability(lot.is_active))
        lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    text = "\n".join(lines).rstrip("‚îÄ\n")

    back_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main_k")]]
    )

    await call.message.answer(text, reply_markup=back_kb)


@router.callback_query(F.data == "back_to_main_k")
async def back_to_main(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞–∫ –±—ã–ª–æ)."""
    try:
        await call.message.delete()
    except Exception:
        pass

    try:
        await call.message.answer_photo(
            FSInputFile(START_PHOTO),
            caption="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=client_kb if call.from_user.id not in ADMINS else build_admin_main_kb()
        )
    except Exception:
        await call.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=client_kb if call.from_user.id not in ADMINS else build_admin_main_kb()
        )
