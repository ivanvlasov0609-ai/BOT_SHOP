import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from config import START_PHOTO, GROUP_ID, ADMINS
from db import Lot
from handlers.lots import format_price_rub
from keyboards.inline import client_kb, build_admin_main_kb

router = Router()
log = logging.getLogger(__name__)

@router.callback_query(F.data == "catalog")
async def show_catalog(call: CallbackQuery, session: AsyncSession):
    try:
        await call.message.delete()
    except:
        pass

    res = await session.execute(select(Lot))
    lots = res.scalars().all()

    if not lots:
        await call.message.answer(
            "üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main_k")]
            ])
        )
        return

    lines = ["üóÇ <b>–ö–∞—Ç–∞–ª–æ–≥ –ª–æ—Ç–æ–≤:</b>\n"]
    for lot in lots:
        status = "üü¢ –í –Ω–∞–ª–∏—á–∏–∏" if lot.is_active else "üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        link = f"https://t.me/c/{str(GROUP_ID)[4:]}/{lot.message_id}" if lot.message_id else None
        lines.append(
            (f"üì¶ <a href='{link}'>–õ–æ—Ç ID: {lot.id}</a> | {lot.name}\n" if link else
             f"üì¶ –õ–æ—Ç ID: {lot.id} | {lot.name}\n")
            + f"üíµ {format_price_rub(lot.price)}\n"
            + f"{status}\n"
            + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main_k")]
    ])
    await call.message.answer("\n".join(lines), disable_web_page_preview=True, reply_markup=kb)

@router.callback_query(F.data == "back_to_main_k")
async def back_to_main_k(call: CallbackQuery, session: AsyncSession):
    from sqlalchemy.future import select
    from db import User, AdminUIState

    try:
        await call.message.delete()
    except:
        pass

    kb = build_admin_main_kb() if call.from_user.id in ADMINS else client_kb
    m = await call.message.answer_photo(
        photo=START_PHOTO,
        caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=kb
    )

    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º id –º–µ–Ω—é
    if call.from_user.id in ADMINS:
        res = await session.execute(select(User).where(User.tg_id == call.from_user.id))
        admin = res.scalars().first()
        if admin:
            # upsert
            q = await session.execute(select(AdminUIState).where(AdminUIState.admin_user_id == admin.id))
            row = q.scalars().first()
            if not row:
                row = AdminUIState(admin_user_id=admin.id, last_menu_message_id=m.message_id)
                session.add(row)
            else:
                row.last_menu_message_id = m.message_id
            await session.commit()
