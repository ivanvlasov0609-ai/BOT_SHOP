import logging
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import asyncio
from config import ADMINS, GROUP_ID
from db import Lot, User, Request, AdminNotification
from handlers.lots import format_price_rub  # –∏–∑ lots/__init__.py —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
from config import PREPAY_PERCENT
router = Router()
log = logging.getLogger(__name__)

# ---------- —É—Ç–∏–ª–∏—Ç—ã –≤—ã–≤–æ–¥–∞ ----------
def s_badge(status: str) -> str:
    return {"pending": "üü¢ –ù–æ–≤–∞—è", "processing": "üü† –í —Ä–∞–±–æ—Ç–µ", "done": "üî¥ –ó–∞–∫—Ä—ã—Ç–∞"}.get(status, status)

def fmt_dt_ru(dt: datetime) -> str:
    return dt.strftime("%d.%m.%Y %H:%M")

def admin_notify_kb(request_id: int, link: str | None) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üõ† –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"req_take:{request_id}")]
    ]
    if link:
        rows.append([InlineKeyboardButton(text="üîó –ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é", url=link)])
    # –≤–∞–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ callback_data ‚Äî –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ
    rows.append([InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å", callback_data=f"hide_req:{request_id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ---------- –æ–±—â–∏–µ —Ö–µ–ª–ø–µ—Ä—ã ----------
async def _ensure_user(session: AsyncSession, tg_id: int, username: str | None, full_name: str | None) -> User:
    res = await session.execute(select(User).where(User.tg_id == tg_id))
    u = res.scalars().first()
    if not u:
        u = User(tg_id=tg_id, username=username, full_name=full_name)
        session.add(u)
        await session.commit()
        await session.refresh(u)
    return u

async def _send_admin_notification(bot: Bot, admin_id: int, text: str, kb: InlineKeyboardMarkup) -> int:
    m = await bot.send_message(
        chat_id=admin_id,
        text=text,
        reply_markup=kb,
        disable_web_page_preview=True,
        disable_notification=False
    )
    return m.message_id

# ----------- –µ–¥–∏–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç—É (—Ç–µ–∫—Å—Ç—ã –∫–∞–∫ —É —Ç–µ–±—è) -----------
async def _send_client_created(bot: Bot, user_tg: int, req_id: int, lot_name: str, price: int, prepay: int, method: str):
    await bot.send_message(
        chat_id=user_tg,
        text=(
            f"üì¢ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{req_id} –ø—Ä–∏–Ω—è—Ç–∞</b>\n"
            f"üßæ –¢–æ–≤–∞—Ä: {lot_name}\n"
            f"üí∞ –°—É–º–º–∞: {format_price_rub(price)}\n"
            f"üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {format_price_rub(prepay)}\n"
            f"{'üöö –°–ø–æ—Å–æ–±: –î–æ—Å—Ç–∞–≤–∫–∞' if method=='delivery' else 'üöÄ –°–ø–æ—Å–æ–±: –°–∞–º–æ–≤—ã–≤–æ–∑'}\n"
            f"üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!"
        )
    )


# ----------- –ö—É–ø–∏—Ç—å (—Å–∞–º–æ–≤—ã–≤–æ–∑) -----------
@router.callback_query(F.data.startswith("buy_lot:"))
async def client_buy_lot(call: CallbackQuery, session: AsyncSession):
    lot_id = int(call.data.split(":")[1])
    lot = await session.get(Lot, lot_id)
    if not lot:
        await call.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user = await _ensure_user(session, call.from_user.id, call.from_user.username, call.from_user.full_name)

    prepay = lot.price * PREPAY_PERCENT // 100
    async with session.begin_nested():
        req = Request(
            user_id=user.id,
            target_type="lot",
            target_id=lot.id,
            prepayment_amount=prepay,
            total_amount=lot.price,
            status="pending",
            details="–°–∞–º–æ–≤—ã–≤–æ–∑",
            created_at=datetime.utcnow(),
        )
        session.add(req)
        await session.flush()  # —É–∂–µ –µ—Å—Ç—å req.id –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

    # —Ç–µ–∫—Å—Ç—ã/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ —É —Ç–µ–±—è
    link = f"https://t.me/c/{str(GROUP_ID)[4:]}/{lot.message_id}" if lot.message_id else None
    kb = admin_notify_kb(req.id, link)
    text = (
        f"üì¢ <b>{s_badge('pending')}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name} (@{call.from_user.username})\n"
        f"üÜî Telegram ID: <code>{call.from_user.id}</code>\n\n"
        f"üì¶ –õ–æ—Ç: <b>{lot.name}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {format_price_rub(lot.price)}\n"
        f"üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {format_price_rub(prepay)}\n"
        f"üóì –°–æ–∑–¥–∞–Ω–∞: {fmt_dt_ru(req.created_at)}\n"
        f"üöÄ –°–ø–æ—Å–æ–±: –°–∞–º–æ–≤—ã–≤–æ–∑\n"
        f"üìù –ó–∞—è–≤–∫–∞ ID: <code>{req.id}</code>"
    )

    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£ (–∫–∞–∫ –±—ã–ª–æ)
    await _send_client_created(call.bot, user.tg_id, req.id, lot.name, lot.price, prepay, "pickup")

    # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –†–ê–°–°–´–õ–ê–ï–ú –ê–î–ú–ò–ù–ê–ú
    send_tasks = []
    for admin_tg in ADMINS:
        send_tasks.append(_send_admin_notification(call.bot, admin_tg, text, kb))
    send_results = await asyncio.gather(*send_tasks, return_exceptions=True)

    # –°–û–•–†–ê–ù–Ø–ï–ú AdminNotification –¢–û–õ–¨–ö–û –î–õ–Ø –£–°–ü–ï–®–ù–´–• –û–¢–ü–†–ê–í–û–ö (–ê–¢–û–ú–ê–†–ù–û)
    async with session.begin_nested():
        for admin_tg, res in zip(ADMINS, send_results):
            if isinstance(res, Exception):
                continue
            admin_user = await _ensure_user(session, admin_tg, None, None)
            session.add(AdminNotification(
                admin_user_id=admin_user.id,
                request_id=req.id,
                tg_message_id=res,
                is_hidden=False
            ))

    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è!")


# ----------- –ö—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π -----------
@router.callback_query(F.data.startswith("buy_lot_delivery:"))
async def client_buy_lot_delivery(call: CallbackQuery, session: AsyncSession):
    lot_id = int(call.data.split(":")[1])
    lot = await session.get(Lot, lot_id)
    if not lot:
        await call.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user = await _ensure_user(session, call.from_user.id, call.from_user.username, call.from_user.full_name)

    prepay = lot.price * PREPAY_PERCENT // 100
    async with session.begin():
        req = Request(
            user_id=user.id,
            target_type="lot",
            target_id=lot.id,
            prepayment_amount=prepay,
            total_amount=lot.price,
            status="pending",
            details="–î–æ—Å—Ç–∞–≤–∫–∞",
            created_at=datetime.utcnow(),
        )
        session.add(req)
        await session.flush()

    link = f"https://t.me/c/{str(GROUP_ID)[4:]}/{lot.message_id}" if lot.message_id else None
    kb = admin_notify_kb(req.id, link)
    text = (
        f"üì¢ <b>{s_badge('pending')}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name} (@{call.from_user.username})\n"
        f"üÜî Telegram ID: <code>{call.from_user.id}</code>\n\n"
        f"üì¶ –õ–æ—Ç: <b>{lot.name}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {format_price_rub(lot.price)}\n"
        f"üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {format_price_rub(prepay)}\n"
        f"üóì –°–æ–∑–¥–∞–Ω–∞: {fmt_dt_ru(req.created_at)}\n"
        f"üöö –°–ø–æ—Å–æ–±: –î–æ—Å—Ç–∞–≤–∫–∞\n"
        f"üìù –ó–∞—è–≤–∫–∞ ID: <code>{req.id}</code>"
    )

    await _send_client_created(call.bot, user.tg_id, req.id, lot.name, lot.price, prepay, "delivery")

    send_tasks = []
    for admin_tg in ADMINS:
        send_tasks.append(_send_admin_notification(call.bot, admin_tg, text, kb))
    send_results = await asyncio.gather(*send_tasks, return_exceptions=True)

    async with session.begin():
        for admin_tg, res in zip(ADMINS, send_results):
            if isinstance(res, Exception):
                continue
            admin_user = await _ensure_user(session, admin_tg, None, None)
            session.add(AdminNotification(
                admin_user_id=admin_user.id,
                request_id=req.id,
                tg_message_id=res,
                is_hidden=False
            ))

    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞!")
