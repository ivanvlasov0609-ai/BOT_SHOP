import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from db import Request, User, Lot, AdminNotification
from handlers.lots.utils import format_price_rub
from handlers.requests_panel.utils import fmt_dt_ru, s_badge
from handlers.requests_panel.view import req_open
from sqlalchemy import func
from db import User, Request, AdminUIState
from aiogram.types import FSInputFile
from config import PHOTOS
from keyboards.inline import build_admin_panel_kb,requests_root_kb
from utils.ui import update_panel
router = Router()
log = logging.getLogger(__name__)

# ============================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–¢–ò–§–ò–ö–ê–¶–ò–ô
# ============================================================
async def _delete_notifications_for_others(session: AsyncSession, bot, req_id: int, current_admin_tg: int | None):
    """–°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤"""
    res_notes = await session.execute(
        select(AdminNotification).where(AdminNotification.request_id == req_id, AdminNotification.is_hidden == False)
    )
    notes = res_notes.scalars().all()
    for n in notes:
        admin_user = await session.get(User, n.admin_user_id)
        if not admin_user:
            continue
        if current_admin_tg and admin_user.tg_id == current_admin_tg:
            continue
        if n.tg_message_id:
            try:
                await bot.delete_message(chat_id=admin_user.tg_id, message_id=n.tg_message_id)
            except Exception:
                pass
        n.is_hidden = True
    await session.commit()


async def _edit_my_notification(session: AsyncSession, bot, req: Request, admin_tg_id: int, link: str | None):
    """–û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞"""
    res_admin = await session.execute(select(User).where(User.tg_id == admin_tg_id))
    me = res_admin.scalars().first()
    if not me:
        return
    res_note = await session.execute(
        select(AdminNotification)
        .where(AdminNotification.admin_user_id == me.id, AdminNotification.request_id == req.id, AdminNotification.is_hidden == False)
        .order_by(AdminNotification.created_at.desc())
    )
    note = res_note.scalars().first()
    if not note or not note.tg_message_id:
        return

    buyer = await session.get(User, req.user_id)
    buyer_line = f"{buyer.full_name or ''} (@{buyer.username})" if buyer else "‚Äî"

    if req.target_type == "lot":
        lot = await session.get(Lot, req.target_id)
        name = lot.name if lot else "–õ–æ—Ç"
        price = lot.price if lot else req.total_amount
        text = (
            f"{'üì¢' if req.status=='pending' else 'üõé'} <b>{s_badge(req.status)}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {buyer_line}\n"
            f"üÜî Telegram ID: <code>{buyer.tg_id if buyer else ''}</code>\n\n"
            f"üì¶ –õ–æ—Ç: <b>{name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {format_price_rub(price)}\n"
            f"üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {format_price_rub(req.prepayment_amount)}\n"
            f"üóì –°–æ–∑–¥–∞–Ω–∞: {fmt_dt_ru(req.created_at)}\n"
            f"üìù –ó–∞—è–≤–∫–∞ ID: <code>{req.id}</code>"
        )
    else:
        text = f"üõé <b>{s_badge(req.status)}</b>\n\nüìù –ó–∞—è–≤–∫–∞ ID: <code>{req.id}</code>"

    rows = []
    if link:
        rows.append([InlineKeyboardButton(text="üîó –ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é", url=link)])
    rows.append([InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å", callback_data=f"hide_req:{req.id}")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    try:
        await bot.edit_message_text(
            chat_id=admin_tg_id,
            message_id=note.tg_message_id,
            text=text,
            reply_markup=kb,
            disable_web_page_preview=True
        )
    except Exception:
        pass

# ============================================================
# FSM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
# ============================================================
class RequestMessage(StatesGroup):
    wait_text = State()

# ============================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô
# ============================================================
@router.callback_query(F.data.startswith("req_take:"))
async def req_take(call: CallbackQuery, session: AsyncSession):
    """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    await call.answer()
    req_id = int(call.data.split(":")[1])
    req = await session.get(Request, req_id)
    if not req:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    if req.status == "processing":
        return await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ", show_alert=True)

    req.status = "processing"
    req.taken_at = datetime.utcnow()
    res_admin = await session.execute(select(User).where(User.tg_id == call.from_user.id))
    admin = res_admin.scalars().first()
    if admin:
        req.taken_by_admin_id = admin.id
    await session.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    user = await session.get(User, req.user_id)
    if user:
        admin_name = call.from_user.full_name or (call.from_user.username and f"@{call.from_user.username}") or "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        await call.bot.send_message(
            chat_id=user.tg_id,
            text=(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{req.id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É\n"
                  f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {admin_name}\n"
                  f"üóì {fmt_dt_ru(datetime.utcnow())}")
        )

    await _delete_notifications_for_others(session, call.bot, req.id, call.from_user.id)
    await _edit_my_notification(session, call.bot, req, call.from_user.id, None)

    await req_open(call, session)


@router.callback_query(F.data.startswith("req_close:"))
async def req_close(call: CallbackQuery, session: AsyncSession):
    """–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"""
    await call.answer()
    req_id = int(call.data.split(":")[1])
    req = await session.get(Request, req_id)
    if not req:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    if req.status == "done":
        return await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)

    req.status = "done"
    req.closed_at = datetime.utcnow()
    await session.commit()

    user = await session.get(User, req.user_id)
    if user:
        admin_name = call.from_user.full_name or (call.from_user.username and f"@{call.from_user.username}") or "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        await call.bot.send_message(
            chat_id=user.tg_id,
            text=(f"üßæ –ó–∞—è–≤–∫–∞ ‚Ññ{req.id} –∑–∞–∫—Ä—ã—Ç–∞\n"
                  f"üë®‚Äçüíº –ó–∞–∫—Ä—ã–ª: {admin_name}\n"
                  f"üóì –ü–µ—Ä–∏–æ–¥: {fmt_dt_ru(req.taken_at)} ‚Äî {fmt_dt_ru(req.closed_at)}\n"
                  f"üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!")
        )

    await _delete_notifications_for_others(session, call.bot, req.id, None)
    await _edit_my_notification(session, call.bot, req, call.from_user.id, None)

    await req_open(call, session)


@router.callback_query(F.data.startswith("req_toggle_lot:"))
async def req_toggle_lot(call: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞"""
    await call.answer()
    from handlers.lots.utils import refresh_lot_keyboard  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

    req_id = int(call.data.split(":")[1])
    req = await session.get(Request, req_id)
    if not req or req.target_type != "lot":
        return await call.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)

    lot = await session.get(Lot, req.target_id)
    if not lot:
        return await call.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    lot.is_active = not bool(lot.is_active)
    await session.commit()

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º –ª–æ—Ç–∞
    await refresh_lot_keyboard(call.bot, lot)

    await call.answer("–°—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    await req_open(call, session)


@router.callback_query(F.data.startswith("req_msg:"))
async def req_msg_begin(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    await call.answer()
    await state.update_data(req_id=int(call.data.split(":")[1]))
    await state.set_state(RequestMessage.wait_text)
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ /cancel):")


@router.message(RequestMessage.wait_text)
async def req_msg_send(msg: Message, state: FSMContext, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
    data = await state.get_data()
    req = await session.get(Request, int(data["req_id"])) if data else None
    user = await session.get(User, req.user_id) if req else None
    if not user:
        await msg.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await msg.bot.send_message(chat_id=user.tg_id, text=msg.text)
    await msg.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    await state.clear()
async def refresh_admin_panel(bot, session: AsyncSession, admin: User):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    # —Å—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
    q = await session.execute(
        select(func.count(Request.id)).where(Request.status == "pending")
    )
    pending_count = int(q.scalar() or 0)

    # –∏—â–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    q2 = await session.execute(
        select(AdminUIState).where(AdminUIState.admin_user_id == admin.id)
    )
    ui_state = q2.scalars().first()
    if not ui_state or not ui_state.last_menu_message_id:
        return

    try:
        await bot.edit_message_media(
            chat_id=admin.tg_id,
            message_id=ui_state.last_menu_message_id,
            media={
                "type": "photo",
                "media": FSInputFile(PHOTOS["admin_panel"]),
                "caption": "‚öô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            },
            reply_markup=build_admin_panel_kb(pending_count)
        )
    except Exception as e:
        print(f"[refresh_admin_panel] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ {admin.tg_id}: {e}")
@router.callback_query(F.data.startswith("hide_req:"))
async def hide_request_notification(call: CallbackQuery, session: AsyncSession):
    """–ê–¥–º–∏–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ —É —Å–µ–±—è"""
    await call.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ ‚úÖ", show_alert=False)

    req_id = int(call.data.split(":")[1])

    # –Ω–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    res_note = await session.execute(
        select(AdminNotification).where(
            AdminNotification.request_id == req_id,
            AdminNotification.is_hidden == False
        )
    )
    note = res_note.scalars().first()
    if not note:
        try:
            await call.message.delete()
        except Exception:
            pass
        return

    # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫—Ä—ã—Ç–æ–µ
    note.is_hidden = True
    await session.commit()

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
    try:
        await call.message.delete()
    except Exception:
        pass
async def refresh_requests_panel(bot, session: AsyncSession, admin: User):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞—è–≤–æ–∫ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    counts = {}
    total = 0
    for st in ("pending", "processing", "done"):
        q = await session.execute(select(func.count(Request.id)).where(Request.status == st))
        counts[st] = int(q.scalar() or 0)
        total += counts[st]

    q2 = await session.execute(select(AdminUIState).where(AdminUIState.admin_user_id == admin.id))
    ui_state = q2.scalars().first()
    if not ui_state or not ui_state.last_requests_message_id:
        return

    try:
        await bot.edit_message_media(
            chat_id=admin.tg_id,
            message_id=ui_state.last_requests_message_id,
            media={
                "type": "photo",
                "media": FSInputFile(PHOTOS["requests_panel"]),
                "caption": f"üìë –ó–∞—è–≤–∫–∏ (–≤—Å–µ–≥–æ: {total})",
            },
            reply_markup=requests_root_kb(counts)
        )
    except Exception as e:
        print(f"[refresh_requests_panel] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫ {admin.tg_id}: {e}")