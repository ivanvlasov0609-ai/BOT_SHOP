import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from db import Request, User, Lot, Product, AdminNotification
from handlers.lots import format_price_rub

router = Router()
log = logging.getLogger(__name__)

PAGE_SIZE = 10

def list_requests_kb(requests):
    rows = []
    for r in requests:
        title = f"#{r.id} ‚Ä¢ {r.target_type} {r.target_id} ‚Ä¢ {r.status}"
        rows.append([InlineKeyboardButton(text=title, callback_data=f"req_open:{r.id}")])
    rows.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def request_actions_kb(req_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –í–µ—Ä–Ω—É—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f"req_resend:{req_id}")],
        [InlineKeyboardButton(text="‚¨Ö –ö —Å–ø–∏—Å–∫—É", callback_data="requests")]
    ])

@router.callback_query(F.data == "requests")
async def open_requests(call: CallbackQuery, session: AsyncSession):
    res = await session.execute(select(Request).order_by(Request.created_at.desc()).limit(PAGE_SIZE))
    reqs = res.scalars().all()
    if not reqs:
        await call.message.edit_caption(
            caption="üìë –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_admin")]])
        )
        return
    await call.message.edit_caption(
        caption="üìë –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=list_requests_kb(reqs)
    )

@router.callback_query(F.data.startswith("req_open:"))
async def req_open(call: CallbackQuery, session: AsyncSession):
    req_id = int(call.data.split(":")[1])
    req = await session.get(Request, req_id)
    if not req:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –∫—Ä–∞—Ç–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    target_info = ""
    if req.target_type == "lot":
        lot = await session.get(Lot, req.target_id)
        target_info = f"–õ–æ—Ç: <b>{lot.name if lot else '‚Äî'}</b>"
    else:
        product = await session.get(Product, req.target_id)
        target_info = f"–¢–æ–≤–∞—Ä: <b>{product.name if product else '‚Äî'}</b>"

    text = (
        f"üìÑ <b>–ó–∞—è–≤–∫–∞ #{req.id}</b>\n"
        f"–¢–∏–ø: {req.target_type}\n"
        f"–°—É–º–º–∞: {format_price_rub(req.total_amount)} (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ {format_price_rub(req.prepayment_amount)})\n"
        f"–°—Ç–∞—Ç—É—Å: {req.status}\n"
        f"{target_info}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {req.created_at:%Y-%m-%d %H:%M}\n"
    )
    await call.message.edit_caption(caption=text, reply_markup=request_actions_kb(req.id))

@router.callback_query(F.data.startswith("req_resend:"))
async def req_resend(call: CallbackQuery, session: AsyncSession):
    req_id = int(call.data.split(":")[1])
    req = await session.get(Request, req_id)
    if not req:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    res_admin = await session.execute(select(User).where(User.tg_id == call.from_user.id))
    admin_user = res_admin.scalars().first()
    if not admin_user:
        await call.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç
    if req.target_type == "lot":
        lot = await session.get(Lot, req.target_id)
        target_name = lot.name if lot else "–õ–æ—Ç"
    else:
        product = await session.get(Product, req.target_id)
        target_name = product.name if product else "–¢–æ–≤–∞—Ä"

    text = (
        f"üì∞ <b>–ó–∞—è–≤–∫–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ)</b>\n\n"
        f"üìù ID: <code>{req.id}</code>\n"
        f"üì¶ {target_name}\n"
        f"üí∞ –°—É–º–º–∞: {format_price_rub(req.total_amount)} | –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {format_price_rub(req.prepayment_amount)}\n"
        f"–°—Ç–∞—Ç—É—Å: {req.status}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f"hide_req:{req.id}")]
    ])

    m = await call.bot.send_message(
        chat_id=call.from_user.id,
        text=text,
        reply_markup=kb,
        disable_web_page_preview=True,
        disable_notification=False  # –≤—Å–µ–≥–¥–∞ —Å–æ –∑–≤—É–∫–æ–º
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    session.add(AdminNotification(
        admin_user_id=admin_user.id,
        request_id=req.id,
        tg_message_id=m.message_id,
        is_hidden=False
    ))
    await session.commit()

    await call.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
